// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SchedulifySystem.Repository.DBContext;

#nullable disable

namespace SchedulifySystem.Repository.Migrations
{
    [DbContext(typeof(SchedulifyContext))]
    [Migration("20241021104716_UpdateSubjectGroup")]
    partial class UpdateSubjectGroup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarURL")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsChangeDefaultPassword")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConfirmSchoolManager")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BuildingCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("Floor")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Building", (string)null);
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.ClassPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassScheduleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DateOfWeek")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("RoomCode")
                        .HasColumnType("text");

                    b.Property<int?>("RoomId")
                        .HasColumnType("integer");

                    b.Property<int>("StartAt")
                        .HasColumnType("integer");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SubjectAbbreviation")
                        .HasColumnType("text");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<string>("TeacherAbbreviation")
                        .HasColumnType("text");

                    b.Property<int?>("TeacherAssignmentId")
                        .HasColumnType("integer");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<int?>("TimeSlotId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClassScheduleId");

                    b.HasIndex("RoomId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherAssignmentId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("ClassPeriod", (string)null);
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.ClassSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<int>("SchoolScheduleId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("StudentClassId")
                        .HasColumnType("integer");

                    b.Property<string>("StudentClassName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SchoolScheduleId");

                    b.HasIndex("StudentClassId");

                    b.ToTable("ClassSchedule", (string)null);
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.ConfigAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AttributeCode")
                        .HasColumnType("text");

                    b.Property<int>("ConfigGroupId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DefaultValue")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("IsHardConfig")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRequire")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxValue")
                        .HasColumnType("integer");

                    b.Property<int>("MinValue")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ConfigGroupId");

                    b.ToTable("ConfigAttributes");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.ConfigGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GroupType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ConfigGroup", (string)null);
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Curriculum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassGroupId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer");

                    b.Property<int>("SchoolYearId")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectGroupId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SchoolYearId");

                    b.HasIndex("SubjectGroupId");

                    b.ToTable("Curriculums");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DepartmentCode")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DistrictCode")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Holiday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("HolidayType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NotificationURL")
                        .HasColumnType("text");

                    b.Property<DateTime>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.OTP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("isUsed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("OTPs");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.RoleAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleAssignment", (string)null);
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailabilityeStatus")
                        .HasColumnType("integer");

                    b.Property<int>("BuildingId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxClassPerTime")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RoomCode")
                        .HasColumnType("text");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.RoomSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("RoomId")
                        .HasColumnType("integer");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("SubjectId");

                    b.ToTable("RoomSubjects");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RoomTypeCode")
                        .HasColumnType("text");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("RoomTypes");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.ScheduleConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConfigAttributeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("SchoolScheduleId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConfigAttributeId");

                    b.HasIndex("SchoolScheduleId");

                    b.ToTable("ScheduleConfigs");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DistrictCode")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("integer");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.SchoolSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ApplyDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FitnessPoint")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MainSession")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("ScheduleType")
                        .HasColumnType("integer");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer");

                    b.Property<int>("SchoolYearId")
                        .HasColumnType("integer");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int>("TermId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WeeklyRange")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SchoolYearId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TermId");

                    b.ToTable("SchoolSchedules");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.SchoolYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EndYear")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("SchoolYearCode")
                        .HasColumnType("text");

                    b.Property<string>("StartYear")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SchoolYears");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.StudentClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<int>("HomeroomTeacherId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFullDay")
                        .HasColumnType("boolean");

                    b.Property<int>("MainSession")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("PeriodCount")
                        .HasColumnType("integer");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer");

                    b.Property<int>("SchoolYearId")
                        .HasColumnType("integer");

                    b.Property<int?>("SubjectGroupId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("HomeroomTeacherId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SchoolYearId");

                    b.HasIndex("SubjectGroupId");

                    b.ToTable("StudentClasses");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("integer");

                    b.Property<int?>("SlotSpecialized")
                        .HasColumnType("integer");

                    b.Property<int?>("SubjectGroupType")
                        .HasColumnType("integer");

                    b.Property<string>("SubjectName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("TotalSlotInYear")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.SubjectConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConfigAttributeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurriculumId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("SchoolScheduleId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentClassId")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConfigAttributeId");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("SchoolScheduleId");

                    b.HasIndex("StudentClassId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectConfigs");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.SubjectGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<string>("GroupCode")
                        .HasColumnType("text");

                    b.Property<string>("GroupDescription")
                        .HasColumnType("text");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("integer");

                    b.Property<int?>("SchoolYearId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SchoolYearId");

                    b.ToTable("SubjectGroups");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.SubjectInGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AfternoonSlotPerWeek")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDoublePeriod")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpecialized")
                        .HasColumnType("boolean");

                    b.Property<int>("MoringSlotPerWeek")
                        .HasColumnType("integer");

                    b.Property<int>("SlotPerTerm")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int?>("TermId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SubjectGroupId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TermId");

                    b.ToTable("SubjectInGroups");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.SubmitRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachedFile")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RequestType")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("SubmitsRequests");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.TeachableSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeachableSubjects");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherRole")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.TeacherAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignmentType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("PeriodCount")
                        .HasColumnType("integer");

                    b.Property<int>("StudentClassId")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<int>("TermId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StudentClassId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TermId");

                    b.ToTable("TeacherAssignments");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.TeacherConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConfigAttributeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("SchoolScheduleId")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConfigAttributeId");

                    b.HasIndex("SchoolScheduleId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherConfigs");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.TeacherUnavailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DateOfWeek")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("WeekNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherUnavailabilities");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Term", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer");

                    b.Property<int>("SchoolYearId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SchoolYearId");

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.TimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Account", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.School", "School")
                        .WithMany("Accounts")
                        .HasForeignKey("SchoolId");

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Building", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.School", "School")
                        .WithMany("Buildings")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.ClassPeriod", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.ClassSchedule", "ClassSchedule")
                        .WithMany("ClassPeriods")
                        .HasForeignKey("ClassScheduleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchedulifySystem.Repository.EntityModels.Room", "Room")
                        .WithMany("ClassPeriods")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchedulifySystem.Repository.EntityModels.Subject", "Subject")
                        .WithMany("ClassPeriods")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchedulifySystem.Repository.EntityModels.TeacherAssignment", "TeacherAssignment")
                        .WithMany("ClassPeriods")
                        .HasForeignKey("TeacherAssignmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchedulifySystem.Repository.EntityModels.Teacher", "Teacher")
                        .WithMany("ClassPeriods")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchedulifySystem.Repository.EntityModels.TimeSlot", "TimeSlot")
                        .WithMany("ClassPeriods")
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ClassSchedule");

                    b.Navigation("Room");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");

                    b.Navigation("TeacherAssignment");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.ClassSchedule", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.SchoolSchedule", "SchoolSchedule")
                        .WithMany("ClassSchedules")
                        .HasForeignKey("SchoolScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulifySystem.Repository.EntityModels.StudentClass", "StudentClass")
                        .WithMany("ClassSchedules")
                        .HasForeignKey("StudentClassId");

                    b.Navigation("SchoolSchedule");

                    b.Navigation("StudentClass");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.ConfigAttribute", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.ConfigGroup", "ConfigGroup")
                        .WithMany("ConfigAttributes")
                        .HasForeignKey("ConfigGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConfigGroup");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Curriculum", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.School", "School")
                        .WithMany("Curriculums")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulifySystem.Repository.EntityModels.SchoolYear", "SchoolYear")
                        .WithMany("Curriculums")
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulifySystem.Repository.EntityModels.SubjectGroup", "SubjectGroup")
                        .WithMany("Curriculums")
                        .HasForeignKey("SubjectGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("SchoolYear");

                    b.Navigation("SubjectGroup");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Department", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.School", "School")
                        .WithMany("Departments")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.District", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Holiday", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.School", "School")
                        .WithMany("Holidays")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Notification", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.Account", "Account")
                        .WithMany("Notifications")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.OTP", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.Account", "Account")
                        .WithMany("OTPs")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.RoleAssignment", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.Account", "Account")
                        .WithMany("RoleAssignments")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulifySystem.Repository.EntityModels.Department", "Department")
                        .WithMany("RoleAssignments")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("SchedulifySystem.Repository.EntityModels.Role", "Role")
                        .WithMany("RoleAssignments")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Department");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Room", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.Building", "Building")
                        .WithMany("Rooms")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulifySystem.Repository.EntityModels.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.RoomSubject", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.Room", "Room")
                        .WithMany("RoomSubjects")
                        .HasForeignKey("RoomId");

                    b.HasOne("SchedulifySystem.Repository.EntityModels.Subject", "Subject")
                        .WithMany("RoomSubjects")
                        .HasForeignKey("SubjectId");

                    b.Navigation("Room");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.RoomType", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.School", "School")
                        .WithMany("RoomTypes")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.ScheduleConfig", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.ConfigAttribute", "ConfigAttribute")
                        .WithMany("ScheduleConfigs")
                        .HasForeignKey("ConfigAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulifySystem.Repository.EntityModels.SchoolSchedule", "SchoolSchedule")
                        .WithMany("ScheduleConfigs")
                        .HasForeignKey("SchoolScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConfigAttribute");

                    b.Navigation("SchoolSchedule");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.School", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.Province", "Province")
                        .WithMany("Schools")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.SchoolSchedule", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.School", "School")
                        .WithMany("SchoolSchedules")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulifySystem.Repository.EntityModels.SchoolYear", "SchoolYear")
                        .WithMany("SchoolSchedules")
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulifySystem.Repository.EntityModels.Subject", null)
                        .WithMany("SchoolSchedules")
                        .HasForeignKey("SubjectId");

                    b.HasOne("SchedulifySystem.Repository.EntityModels.Term", "Term")
                        .WithMany("SchoolSchedules")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("SchoolYear");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.StudentClass", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.Teacher", "Teacher")
                        .WithMany("StudentClasses")
                        .HasForeignKey("HomeroomTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulifySystem.Repository.EntityModels.School", "School")
                        .WithMany("StudentClasses")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulifySystem.Repository.EntityModels.SchoolYear", "SchoolYear")
                        .WithMany("StudentClasses")
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulifySystem.Repository.EntityModels.SubjectGroup", "SubjectGroup")
                        .WithMany("StudentClasses")
                        .HasForeignKey("SubjectGroupId");

                    b.Navigation("School");

                    b.Navigation("SchoolYear");

                    b.Navigation("SubjectGroup");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Subject", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.School", "School")
                        .WithMany("Subject")
                        .HasForeignKey("SchoolId");

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.SubjectConfig", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.ConfigAttribute", "ConfigAttribute")
                        .WithMany("SubjectConfigs")
                        .HasForeignKey("ConfigAttributeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchedulifySystem.Repository.EntityModels.Curriculum", "Curriculum")
                        .WithMany("SubjectConfigs")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchedulifySystem.Repository.EntityModels.SchoolSchedule", "SchoolSchedule")
                        .WithMany("SubjectConfigs")
                        .HasForeignKey("SchoolScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchedulifySystem.Repository.EntityModels.StudentClass", "StudentClass")
                        .WithMany("SubjectConfigs")
                        .HasForeignKey("StudentClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchedulifySystem.Repository.EntityModels.Subject", "Subject")
                        .WithMany("SubjectConfigs")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConfigAttribute");

                    b.Navigation("Curriculum");

                    b.Navigation("SchoolSchedule");

                    b.Navigation("StudentClass");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.SubjectGroup", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.School", "School")
                        .WithMany("SubjectGroups")
                        .HasForeignKey("SchoolId");

                    b.HasOne("SchedulifySystem.Repository.EntityModels.SchoolYear", "SchoolYear")
                        .WithMany("SubjectGroups")
                        .HasForeignKey("SchoolYearId");

                    b.Navigation("School");

                    b.Navigation("SchoolYear");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.SubjectInGroup", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.SubjectGroup", "SubjectGroup")
                        .WithMany("SubjectInGroups")
                        .HasForeignKey("SubjectGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulifySystem.Repository.EntityModels.Subject", "Subject")
                        .WithMany("SubjectInGroups")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulifySystem.Repository.EntityModels.Term", "Term")
                        .WithMany("SubjectInGroups")
                        .HasForeignKey("TermId");

                    b.Navigation("Subject");

                    b.Navigation("SubjectGroup");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.SubmitRequest", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.Teacher", "Teacher")
                        .WithMany("SubmitRequests")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.TeachableSubject", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.Subject", "Subject")
                        .WithMany("TeachableSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulifySystem.Repository.EntityModels.Teacher", "Teacher")
                        .WithMany("TeachableSubjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Teacher", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.Department", "Department")
                        .WithMany("Teachers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulifySystem.Repository.EntityModels.School", "School")
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.TeacherAssignment", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.StudentClass", "StudentClass")
                        .WithMany("TeacherAssignments")
                        .HasForeignKey("StudentClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchedulifySystem.Repository.EntityModels.Subject", "Subject")
                        .WithMany("TeacherAssignments")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchedulifySystem.Repository.EntityModels.Teacher", "Teacher")
                        .WithMany("TeacherAssignments")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchedulifySystem.Repository.EntityModels.Term", "Term")
                        .WithMany("TeacherAssignments")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StudentClass");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.TeacherConfig", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.ConfigAttribute", "ConfigAttribute")
                        .WithMany("TeacherConfigs")
                        .HasForeignKey("ConfigAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulifySystem.Repository.EntityModels.SchoolSchedule", "SchoolSchedule")
                        .WithMany("TeacherConfigs")
                        .HasForeignKey("SchoolScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulifySystem.Repository.EntityModels.Teacher", "Teacher")
                        .WithMany("TeacherConfigs")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConfigAttribute");

                    b.Navigation("SchoolSchedule");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.TeacherUnavailability", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.Teacher", "Teacher")
                        .WithMany("TeacherUnavailabilities")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Term", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.School", "School")
                        .WithMany("Terms")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulifySystem.Repository.EntityModels.SchoolYear", "SchoolYear")
                        .WithMany("Terms")
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("SchoolYear");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.TimeSlot", b =>
                {
                    b.HasOne("SchedulifySystem.Repository.EntityModels.School", "School")
                        .WithMany("TimeSlots")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Account", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("OTPs");

                    b.Navigation("RoleAssignments");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Building", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.ClassSchedule", b =>
                {
                    b.Navigation("ClassPeriods");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.ConfigAttribute", b =>
                {
                    b.Navigation("ScheduleConfigs");

                    b.Navigation("SubjectConfigs");

                    b.Navigation("TeacherConfigs");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.ConfigGroup", b =>
                {
                    b.Navigation("ConfigAttributes");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Curriculum", b =>
                {
                    b.Navigation("SubjectConfigs");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Department", b =>
                {
                    b.Navigation("RoleAssignments");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Province", b =>
                {
                    b.Navigation("Districts");

                    b.Navigation("Schools");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Role", b =>
                {
                    b.Navigation("RoleAssignments");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Room", b =>
                {
                    b.Navigation("ClassPeriods");

                    b.Navigation("RoomSubjects");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.School", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Buildings");

                    b.Navigation("Curriculums");

                    b.Navigation("Departments");

                    b.Navigation("Holidays");

                    b.Navigation("RoomTypes");

                    b.Navigation("SchoolSchedules");

                    b.Navigation("StudentClasses");

                    b.Navigation("Subject");

                    b.Navigation("SubjectGroups");

                    b.Navigation("Teachers");

                    b.Navigation("Terms");

                    b.Navigation("TimeSlots");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.SchoolSchedule", b =>
                {
                    b.Navigation("ClassSchedules");

                    b.Navigation("ScheduleConfigs");

                    b.Navigation("SubjectConfigs");

                    b.Navigation("TeacherConfigs");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.SchoolYear", b =>
                {
                    b.Navigation("Curriculums");

                    b.Navigation("SchoolSchedules");

                    b.Navigation("StudentClasses");

                    b.Navigation("SubjectGroups");

                    b.Navigation("Terms");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.StudentClass", b =>
                {
                    b.Navigation("ClassSchedules");

                    b.Navigation("SubjectConfigs");

                    b.Navigation("TeacherAssignments");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Subject", b =>
                {
                    b.Navigation("ClassPeriods");

                    b.Navigation("RoomSubjects");

                    b.Navigation("SchoolSchedules");

                    b.Navigation("SubjectConfigs");

                    b.Navigation("SubjectInGroups");

                    b.Navigation("TeachableSubjects");

                    b.Navigation("TeacherAssignments");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.SubjectGroup", b =>
                {
                    b.Navigation("Curriculums");

                    b.Navigation("StudentClasses");

                    b.Navigation("SubjectInGroups");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Teacher", b =>
                {
                    b.Navigation("ClassPeriods");

                    b.Navigation("StudentClasses");

                    b.Navigation("SubmitRequests");

                    b.Navigation("TeachableSubjects");

                    b.Navigation("TeacherAssignments");

                    b.Navigation("TeacherConfigs");

                    b.Navigation("TeacherUnavailabilities");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.TeacherAssignment", b =>
                {
                    b.Navigation("ClassPeriods");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.Term", b =>
                {
                    b.Navigation("SchoolSchedules");

                    b.Navigation("SubjectInGroups");

                    b.Navigation("TeacherAssignments");
                });

            modelBuilder.Entity("SchedulifySystem.Repository.EntityModels.TimeSlot", b =>
                {
                    b.Navigation("ClassPeriods");
                });
#pragma warning restore 612, 618
        }
    }
}
